<?php

namespace drieschel\batches;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-06-05 at 15:24:02.
 */
class BatchTest extends \PHPUnit_Framework_TestCase
{

  /**
   * @var Batch
   */
  protected $object;

  /**
   * @var string
   */
  protected $runFilesDir;
  
  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp()
  {
    $this->runFilesDir = __DIR__ . '/runFiles';
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown()
  {

  }

  /**
   * @covers drieschel\batches\Batch::run
   */
  public function testFirstRun()
  {
    
    $file = $this->runFilesDir . '/batch_test';
    if(is_file($file))
    {
      unlink($file);
    }
    
    $batch = new Batch('test', $this->runFilesDir);
    $jobMock = $this->getMockBuilder('\\drieschel\\batches\\Job')->getMock();
    $batch->addJob($jobMock);
    $batch->run();    
    $this->assertTrue(is_file($file));
  }
  /**
   * @covers drieschel\batches\Batch::run
   */
  public function testRunWithIntervalTimeExceeded()
  {
    $lastModifyDate = new \DateTime('2015-01-01');
    $file = $this->runFilesDir . '/batch_test';
    touch($file, $lastModifyDate->getTimestamp());
    $jobMock = $this->getMockBuilder('\\drieschel\\batches\\Job')->getMock();
    $batch = new Batch('test', $this->runFilesDir);    
    $batch->executionPlan('*', '*', '1', '0', '0');
    $batch->addJob($jobMock);
    $batch->run();
    $oldTime = $lastModifyDate->getTimestamp();
    clearstatcache();
    $newTime = filemtime($file);
    $this->assertTrue($oldTime < $newTime);
  }
  /**
   * @covers drieschel\batches\Batch::run
   */
  public function testRunWithLastRunInPastButInInterval()
  {
    $halfHourAgo = new \DateTime('@' . (time() - 1800));    
    $oneHourAgo = new \DateTime('@' . (time() - 3600));
    $file = $this->runFilesDir . '/batch_test';
    touch($file, $halfHourAgo->getTimestamp());
    $jobMock = $this->getMockBuilder('\\drieschel\\batches\\Job')->getMock();
    $batch = new Batch('test', $this->runFilesDir);
    $batch->executionPlan('*', '*', '*', $oneHourAgo->format('m'), '0');
    $batch->addJob($jobMock);
    $batch->run();
    $oldTime = $halfHourAgo->getTimestamp();
    clearstatcache();
    $newTime = filemtime($file);
    $this->assertTrue($oldTime === $newTime);
  }

}
